<?php

/**
 * @file
 * Contains df_tools_workflow.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
 * Implements hook_modules_installed().
 */
function df_tools_workflow_modules_installed(array $modules) {
  // Don't do anything during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  // Grant 'Creators' the ability to create draft content and mark it for
  // review.
  if (in_array('df_tools_user', $modules)) {
    $creator_permissions = [
      'use moderation sidebar',
      // 'use moderation dashboard',
      'view latest version',
      'use editorial transition archive',
      'use editorial transition create_new_draft',
      'use editorial transition archived_published',
      'use editorial transition archived_draft',
      'use editorial transition review',
    ];
    user_role_grant_permissions('creator', $creator_permissions);

    // Grant 'Reviewers' the ability to review flagged content and publish it.
    $reviewer_permissions = [
      'use moderation sidebar',
      // 'use moderation dashboard',
      'view latest version',
      'use editorial transition archive',
      'use editorial transition create_new_draft',
      'use editorial transition publish',
      'use editorial transition archived_published',
      'use editorial transition archived_draft',
      'use editorial transition review',
    ];
    user_role_grant_permissions('reviewer', $reviewer_permissions);
  }
}

/**
 * Implements hook_form_alter().
 *
 * We auto-populate and hide the Revision log message on node/add/* forms.
 */
function df_tools_workflow_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (\Drupal::routeMatch()->getRouteName() == 'node.add') {
    $replace = [
      '@user' => \Drupal::currentUser()->getDisplayName(),
      '@date' => date("F jS, Y")
    ];
    $form['revision_log']['widget'][0]['value']['#default_value'] = t('Created by @user on @date.', $replace);
    $form['revision_log']['widget']['#access'] = FALSE;
  }
  $form['#attached']['library'][] = 'df_tools_workflow/df_tools_workflow';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a form submission handler to the content moderation module's entity
 * moderation form in order to redirect users to the latest version of the
 * content when creating a new draft.
 */
function df_tools_workflow_form_content_moderation_entity_moderation_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'df_tools_workflow_content_moderation_entity_moderation_form_submit';
}

/**
 * Form submission callback for content_moderation_entity_moderation_form.
 */
function df_tools_workflow_content_moderation_entity_moderation_form_submit($form, FormStateInterface $form_state) {
  /** @var ContentEntityInterface $entity */
  $entity = $form_state->get('entity');

  // Retrieve the content's new state.
  $new_state = $form_state->getValue('new_state');

  // When creating a new draft, redirect the user to the latest version of the
  // content.
  if ($new_state == 'draft') {
    $form_state->setRedirectUrl($entity->toUrl('latest-version'));
  }
}

/**
 * Implements hook_menu_local_tasks_alter();
 */
function df_tools_workflow_menu_local_tasks_alter(&$data, $route_name) {
  // Runs when cache tag config:block.block.[ActiveTheme]_local_actions is invalidated.
  if (isset($data['tabs'][0]['content_moderation.workflows:node.latest_version_tab'])) {
    $url = $data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']['#link']['url'];
    $param = $url->getRouteParameters();
    if (isset($param['node'])) {
      $node = Node::load($param['node']);
      $moderation_info = \Drupal::service('content_moderation.moderation_information');
      $latest_node = $moderation_info->getLatestRevision('node', $node->id());
      // Modify the tabs when the canonical route is the latest revision.
      if ($latest_node->getRevisionId() == $node->getRevisionId()) {
        // Highlight the 'View' tab at /node/%/latest.
        if ($data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']['#active']) {
          $data['tabs'][0]['entity.node.canonical']['#active'] = TRUE;
        }
        // Remove the latest version tab.
        unset($data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']);
      }
    }
  }
}

/**
 * Implements hook_tokens().
 */
function df_tools_workflow_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'node' && !empty($data['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $data['node'];
    $url_options = ['absolute' => TRUE];
    if (isset($options['langcode']) && $node->hasTranslation($options['langcode'])) {
      $url_options['language'] = \Drupal::languageManager()->getLanguage($options['langcode']);
      $langcode = $options['langcode'];
    }
    else {
      $langcode = NULL;
    }

    /** @var \Drupal\content_moderation\ModerationInformation $moderation_information */
    $moderation_information = \Drupal::service('content_moderation.moderation_information');

    /** @var \Drupal\node\NodeInterface $latest */
    if (!($latest = $moderation_information->getLatestRevision('node', $node->id()))) {
      $latest = $node;
    }

    if ($langcode) {
      $latest = $latest->getTranslation($langcode);
    }

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'latest_author':
          $replacements[$original] = $latest->getRevisionUser()->label();
          break;
        case 'latest_url':
          if ($node->getRevisionId() !== $latest->getRevisionId()) {
            $replacements[$original] = Url::fromRoute('entity.node.latest_version', [
              'node' => $node->id(),
            ], $url_options)->toString();
          }
          else {
            $replacements[$original] = $latest->toUrl('canonical', $url_options)->toString();
          }
          break;
      }
    }

    $token_service = \Drupal::token();
    if ($author_tokens = $token_service->findWithPrefix($tokens, 'latest_author')) {
      $replacements += $token_service->generate('user', $author_tokens, ['user' => $latest->getRevisionUser()], $options, $bubbleable_metadata);
    }
  }

  return $replacements;
}

/**
 * Implements hook_library_info_alter().
 */
function df_tools_workflow_library_info_alter(&$libraries, $extension) {
  if ($extension === 'moderation_note') {
    unset($libraries['main']['dependencies']);
  }
}

/**
 * Implements hook_moderation_sidebar_alter().
 */
function df_tools_workflow_moderation_sidebar_alter(array &$build, EntityInterface $entity) {
    $build['actions']['primary']['view_latest']['#attributes']['class'][]
      = 'view-latest';
    $build['actions']['primary']['view_default']['#attributes']['class'][]
      = 'view-default';
    $build['actions']['primary']['edit']['#attributes']['class'][] = 'edit';
}
