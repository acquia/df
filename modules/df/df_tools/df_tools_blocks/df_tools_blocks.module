<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function df_tools_blocks_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'hero') {
    $wrapper = [
      '#prefix' =>'<div class="full-width-inner">',
      '#suffix' =>'</div>',
      '#type' => 'container',
      '#weight' => -1,
      '#attributes' => [
        'class' => ['hero-block-fields'],
      ],
      '#children' => [],
    ];
    foreach (Element::getVisibleChildren($build) as $field_name) {
      if ($field_name == 'field_icon' && isset($build[$field_name]['#object'])) {
        $icon = $build[$field_name]['#object']->field_icon->getString();
        if (!empty($icon)) {
          $wrapper['#children'][$field_name] = [
            '#markup' => '<i class="fa ' . $icon . ' hero-icon"></i>',
            '#allowed_tags' => ['i'],
          ];
        }
        unset($build[$field_name]);
      }
      else if ($field_name != 'field_hero_image') {
        $wrapper['#children'][$field_name] = $build[$field_name];
        unset($build[$field_name]);
      }
    }
    // Attach styles.
    $alignment = $entity->get('field_hero_alignment')->getString();
    if (preg_match('/^[a-z_]+$/i', $alignment)) {
      $wrapper['#attributes']['class'][] = Html::cleanCssIdentifier('hero-block-align-' . $alignment);
    }
    $color_regex = '/^#[0-9a-f]{6}$/i';
    $text_color = $entity->get('field_text_color')->getString();
    if (preg_match($color_regex, $text_color)) {
      $wrapper['#children']['field_first_line']['#attributes']['style'] = 'color: ' . $text_color;
      $wrapper['#children']['field_second_line']['#attributes']['style'] = 'color: ' . $text_color;
    }
    $gradient_color = $entity->get('field_gradient_color')->getString();
    if (preg_match($color_regex, $gradient_color)) {
      switch ($alignment) {
        case 'left':
          $direction = 'to right';
          break;
        case 'right':
          $direction = 'to left';
          break;
        default:
          $direction = 'to bottom';
          break;
      }
      $build['field_hero_image']['#attributes']['style'] = "background-image: linear-gradient($direction, $gradient_color, transparent)";
    }
    $callout_color = $entity->get('field_callout_color')->getString();
    if (preg_match($color_regex, $callout_color)) {
      $style = 'background-color: ' . $callout_color . ';';
      $hex = trim($callout_color, '#');
      $r = hexdec(substr($hex,0,2));
      $g = hexdec(substr($hex,2,2));
      $b = hexdec(substr($hex,4,2));
      if ($r + $g + $b > 382) {
        $wrapper['#children']['field_hero_link'][0]['#attributes']['class'][] = 'hero-link-light-bg';
        $style .= 'border-color:black;color:black;';
      }
      else {
        $wrapper['#children']['field_hero_link'][0]['#attributes']['class'][] = 'hero-link-dark-bg';
        $style .= 'border-color:white;color:white;';
      }
      $wrapper['#children']['field_hero_link'][0]['#attributes']['style'] = $style;
    }
    $wrapper['#attached']['library'][] = 'df_tools_blocks/hero';
    $build['wrapper'] = $wrapper;
    $build['#prefix'] = '<div class="hero-block">';
    $build['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function df_tools_blocks_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add block--block-content--bundle.html.twig suggestions
  if (isset($variables['elements']['content']) && isset($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $entity */
    $entity = $variables['elements']['content']['#block_content'];
    $suggestions[] = 'block__block_content__' . $entity->bundle();
  }
}

/**
 * Implements hook_form_alter().
 */
function df_tools_blocks_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (preg_match('/^block_content.*panels_ipe_form$/', $form_id)) {
    // Wrap the revision information and any other vertical tabs in a fieldset.
    // This breaks vertical tab styling, but we don't want this open most of
    // the time anyway.
    $form['advanced'] = [
      '#type' => 'details',
      '#title' => t('Advanced'),
      '#collapsed' => TRUE,
      '#attributes' => ['class' => ['fieldset']],
      '#weight' => 100,
      0 => $form['advanced'],
    ];

    // Hide the Block description description and remove any mention of "Block".
    $form['info']['widget'][0]['value']['#title'] = t('Description');
    $form['info']['widget'][0]['value']['#description'] = [];
  }

  if (preg_match('/^block_content_\X*_edit_form$/', $form_id)) {
    // Add a 'copy' button to all custom blocks edit forms.
    $form['actions']['copy'] = [
      '#type' => 'submit',
      '#value' => t('Copy'),
      '#submit' => ['df_tools_blocks_block_content_replicate'],
      '#weight' => 9
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function df_tools_blocks_form_panels_ipe_block_plugin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Modify the block placement form.
  if (isset($form['flipper']['front']['settings']['admin_label'])) {
    $form['flipper']['front']['settings']['admin_label']['#weight'] = -2;
  }

  if (isset($form['flipper']['front']['settings']['label_display'])) {
    $form['flipper']['front']['settings']['label_display']['#default_value'] = FALSE;
    $form['flipper']['front']['settings']['label_display']['#weight'] = -1;
  }

  if (isset($form['flipper']['front']['settings']['label'])) {
    $form['flipper']['front']['settings']['label']['#weight'] = 0;
    $form['flipper']['front']['settings']['label']['#states'] = [
      'visible' => [
        ':input[name="settings[label_display]"]' => ['checked' => TRUE],
      ],
    ];
  }

  // Add special logic for the Entity Browser block plugins.
  if (isset($form['plugin_id']) && !$form_state->isProcessingInput()) {
    if ($form['plugin_id']['#value'] == 'content_embed') {
      // Only auto-open the Content Embed block if it is empty.
      if (empty(Element::getVisibleChildren($form['flipper']['front']['settings']['selection']['table']))) {
        $form['#attached']['library'][] = 'df_tools_blocks/auto_open';
        $form['#attributes']['data-df-tools-blocks-auto-open'] = 'settings_selection_nids_entity_browser';
      }

      // Modify the Content Embed form to guide users to valid View Modes.
      if (empty($form['flipper']['front']['settings']['view_mode']['#default_value'])) {
        $form['flipper']['front']['settings']['view_mode']['#default_value'] = 'featured';
      }
      $excluded_modes = [
        'basic_info',
        'content_browser',
        'rss',
        'search_index',
        'search_result',
        'token',
        'full',
        'df'
      ];
      foreach ($excluded_modes as $view_mode) {
        if (isset($form['flipper']['front']['settings']['view_mode']['#options'][$view_mode])) {
          unset($form['flipper']['front']['settings']['view_mode']['#options'][$view_mode]);
        }
      }

    }
    else if ($form['plugin_id']['#value'] == 'image_embed') {
      $form['#attached']['library'][] = 'df_tools_blocks/auto_open';
      $form['#attributes']['data-df-tools-blocks-auto-open'] = 'settings_selection_fids_entity_browser';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function df_tools_blocks_form_block_content_hero_panels_ipe_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Move the hero image out of the details element and set a better label.
  $form['field_hero_image']['widget']['#type'] = 'container';
  $form['field_hero_image']['widget']['entity_browser']['#process'][] = '_df_tools_blocks_hero_browser_button';
  // Remove the link fieldset and put the URI and title side-by-side.
  $form['field_hero_link']['widget'][0]['#type'] = 'container';
  $form['field_hero_link']['widget'][0]['#attributes']['class'][] = 'row';
  unset($form['field_hero_link']['widget'][0]['uri']['#description']);
  $form['field_hero_link']['widget'][0]['uri']['#title'] = t('Callout link');
  $form['field_hero_link']['widget'][0]['title']['#title'] = t('Callout text');
  $form['field_hero_link']['widget'][0]['uri']['#prefix'] = '<div class="large-6 columns">';
  $form['field_hero_link']['widget'][0]['uri']['#suffix'] = '</div>';
  $form['field_hero_link']['widget'][0]['title']['#prefix'] = '<div class="large-6 columns">';
  $form['field_hero_link']['widget'][0]['title']['#suffix'] = '</div>';
  // Group complex form elements into the advanced section.
  $form['advanced'][] = $form['field_icon'];
  $form['advanced'][] = $form['field_nested_block'];
  unset($form['field_icon']);
  unset($form['field_nested_block']);
  $style_fields = [
    'field_text_color',
    'field_gradient_color',
    'field_callout_color',
  ];
  $form['style_fields'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['row']],
  ];
  foreach ($style_fields as $field) {
    if (strpos($field, 'color') !== FALSE) {
      $form[$field]['widget'][0]['value']['#type'] = 'color';
    }
    $form[$field]['#attributes']['class'][] = 'large-4 columns';
    $form['style_fields'][] = $form[$field];
    $form['style_fields']['#weight'] = $form[$field]['#weight'];
    unset($form[$field]);
  }
}

/**
 * Does nit-picky changes on the Hero image entity browser.
 *
 * @param array $element
 *   The element render array.
 *
 * @return array
 *   The possibly modified form render array.
 */
function _df_tools_blocks_hero_browser_button($element) {
  $element['entity_browser']['open_modal']['#value'] = t('Select background');
  if (isset($element['entity_browser']['open_modal']['#ajax'])) {
    /** @var \Drupal\entity_browser\DisplayInterface $display */
    $display = $element['entity_browser']['open_modal']['#ajax']['callback'][0];
    $configuration = $display->getConfiguration();
    $configuration['link_text'] = t('Background image');
    $display->setConfiguration($configuration);
  }
  return $element;
}

/**
 * Implements hook_migration_plugins_alter().
 */
function df_tools_blocks_migration_plugins_alter(&$definitions) {
  // Set up the correct pa$th for the CSV files in this module.
  $types = ['hero', 'media'];
  foreach ($types as $type) {
    $id = 'import_block_' . $type;
    $definitions[$id]['source']['path'] = str_replace('..', dirname(__FILE__), $definitions[$id]['source']['path']);
  }
}

/**
 * Implements hook_block_alter().
 */
function df_tools_blocks_block_alter(&$block_info) {
  // Create an associative array which maps default => custom block categories.
  $category_map = [
    'Embed' => 'Create Display',
    'Entity Block' => 'Existing Content',
    'User' => 'System',
    'Chaos tools' => 'System',
    'Help' => 'System',
    'core' => 'System',
    'Workbench moderation' => 'System',
    'Lists (Views)' => 'Lists',
    'AddToAny' => 'Social',
  ];

  // Create a whitelist of entity types to pare down the list of entity blocks.
  $entity_block_id_whitelist = [
    'entity_block:block_content',
    'entity_block:commerce_product',
    'entity_block:entity_gallery',
    'entity_block:file',
    'entity_block:media',
    'entity_block:node',
    'entity_block:taxonomy_term',
    'entity_block:user',
  ];

  foreach ($block_info as $key => $info) {
    // Retrieve the name of the block category.
    $category = $info['category'];

    // Retrieve the untranslated name of the category if it has been translated.
    if ($category instanceof \Drupal\Core\StringTranslation\TranslatableMarkup) {
      $category = $category->getUntranslatedString();
    }

    // Move all fields of the currently panelized entity into a
    // 'Current @Entity_Type' category. If the block is not a field on the
    // current entity, allow its category to be remapped.
    if ($category == '@entity') {
      $block_info[$key]['category'] = 'Current ' . $info['category']->render();
    }
    else {
      if (isset($category_map[$category])) {
        $block_info[$key]['category'] = t($category_map[$category]);
      }
    }

    // Restrict entity blocks according to the whitelist.
    if ($category == 'Entity Block' && !in_array($key, $entity_block_id_whitelist)) {
      unset($block_info[$key]);
    }
  }
}

function df_tools_blocks_block_content_replicate($form, FormStateInterface $form_state) {
  // Retrieve block content entity from form_state.
  $entity = $form_state->getFormObject()->getEntity();
  // Extract a few values from the entity.
  $block_info = $entity->get('info')->value;
  $block_id = $entity->id();
  // Replicate the block content entity.
  if (\Drupal::service('df_tools_blocks.copier')->makeCopy($entity)) {
    $message = t('Block Content: copied @info [id:@id]', ['@info' => $block_info, '@id' => $block_id]);
    \Drupal::logger('df_tools_blocks')->info($message);
    drupal_set_message($message, 'status');
  }
  // Redirect to block list comes free!
}
