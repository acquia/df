<?php

/**
 * @file
 * Contains df_tools_blocks.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_block().
 */
function df_tools_blocks_preprocess_block(&$variables) {
  if (isset($variables['content']) && isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->bundle() == 'hero') {
      $wrapper = array(
        '#prefix' =>'<div class="full-width-inner">',
        '#suffix' =>'</div>',
        '#type' => 'container',
        '#weight' => -1,
        '#attributes' => array(
          'class' => array('hero-block-fields row align-center')
        ),
        '#children' => array()
      );
      foreach (Element::getVisibleChildren($variables['content']) as $field_name) {
        if ($field_name == 'field_icon' && isset($variables['content'][$field_name]['#object'])) {
          $icon = $variables['content'][$field_name]['#object']->field_icon->getString();
          if (!empty($icon)) {
            $wrapper['#children'][] = [
              '#markup' => '<i class="fa ' . $icon . ' hero-icon"></i>',
              '#allowed_tags' => ['i'],
            ];
          }
          unset($variables['content'][$field_name]);
        }
        else if ($field_name != 'field_hero_image') {
          $wrapper['#children'][] = $variables['content'][$field_name];
          unset($variables['content'][$field_name]);
        }
      }
      $variables['content']['wrapper'] = $wrapper;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function df_tools_blocks_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add block--block-content--bundle.html.twig suggestions
  if (isset($variables['elements']['content']) && isset($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $entity */
    $entity = $variables['elements']['content']['#block_content'];
    $suggestions[] = 'block__block_content__' . $entity->bundle();
  }
}

/**
 * Implements hook_form_alter().
 */
function df_tools_blocks_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (preg_match('/^block_content.*panels_ipe_form$/', $form_id)) {
    // Wrap the revision information and any other vertical tabs in a fieldset.
    // This breaks vertical tab styling, but we don't want this open most of
    // the time anyway.
    $form['advanced'] = [
      '#type' => 'details',
      '#title' => t('Advanced'),
      '#collapsed' => TRUE,
      '#attributes' => ['class' => ['fieldset']],
      '#weight' => 100,
      0 => $form['advanced'],
    ];

    // Hide the Block description description and remove any mention of "Block".
    $form['info']['widget'][0]['value']['#title'] = t('Description');
    $form['info']['widget'][0]['value']['#description'] = [];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function df_tools_blocks_form_panels_ipe_block_plugin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Modify the block placement form.
  if (isset($form['flipper']['front']['settings']['admin_label'])) {
    $form['flipper']['front']['settings']['admin_label']['#weight'] = -2;
  }

  if (isset($form['flipper']['front']['settings']['label_display'])) {
    $form['flipper']['front']['settings']['label_display']['#default_value'] = FALSE;
    $form['flipper']['front']['settings']['label_display']['#weight'] = -1;
  }

  if (isset($form['flipper']['front']['settings']['label'])) {
    $form['flipper']['front']['settings']['label']['#weight'] = 0;
    $form['flipper']['front']['settings']['label']['#states'] = [
      'visible' => [
      ':input[name="settings[label_display]"]' => ['checked' => TRUE],
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function df_tools_blocks_form_block_content_hero_panels_ipe_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Group the form into multiple fieldsets.
  $grouping = [
    'Hero Text' => ['field_first_line', 'field_second_line'],
    'Hero Link' => ['field_hero_link'],
    'Hero Icon' => ['field_icon'],
    'Nested Block' => ['field_nested_block'],
    ];
  foreach ($grouping as $label => $fields) {
    $fieldset_key = strtolower(str_replace(' ', '_', $label));
    $form[$fieldset_key] = [
      '#type' => 'details',
      '#title' => t($label),
      '#attributes' => ['class' => ['fieldset']],
      '#collapsed' => TRUE,
      '#weight' => 99,
      ];
    foreach ($fields as $field) {
      $form[$fieldset_key][$field] = $form[$field];
      unset($form[$field]);
    }
  }
}

/**
 * Implements hook_migration_plugins_alter().
 */
function df_tools_blocks_migration_plugins_alter(&$definitions) {
  // Set up base path.
  $path = dirname(__FILE__) . '/data/';

  // Add our block migrations
  $types = [
    'content' => [
      'columns' => [
        2 => 'Content'
      ],
      'fields' => [
        'field_content' => 'Content',
      ]
    ],
    'hero' => [
      'columns' => [
        2 => 'First Line',
        3 => 'Second Line',
        4 => 'Link',
        5 => 'Link Title',
        6 => 'Image',
        7 => 'Nested Blocks',
      ],
      'fields' => [
        'field_first_line/value' => 'First Line',
        'field_second_line/value' => 'Second Line',
        'field_hero_link/uri' => 'Link',
        'field_hero_link/title' => 'Link Title',
        'field_hero_image' => 'Image',
        'field_nested_block' => 'Nested Blocks',
      ]
    ],
    'map' => [
      'columns' => [
        2 => 'Lat',
        3 => 'Long'
      ],
      'fields' => [
        'field_location' => 'Location'
      ]
    ],
    'media' => [
      'columns' => [
        2 => 'Media'
      ],
      'fields' => [
        'field_media' => 'Media'
      ]
    ],
    'url' => [
      'columns' => [
        2 => 'URL'
      ],
      'fields' => [
        'field_url' => 'URL'
      ]
    ],
  ];
  foreach ($types as $type => $info) {
    $migration = _df_migration_copy($definitions['import_block_base'], 'block', $type, 'block_content', $path);
    // Add our custom fields.
    _df_migration_fields($migration, $info['columns'], $info['fields']);
    // Add our custom plugins.
    $migration['source']['plugin'] = $type . '_block';
    // Save the new migration.
    $definitions[$migration['id']] = $migration;
  }
}

/**
 * Implements hook_block_alter().
 */
function df_tools_blocks_block_alter(&$block_info) {
  $category_map = [
    'User' => 'System',
    'Chaos tools' => 'System',
    'Help' => 'System',
    'core' => 'System',
    'Workbench moderation' => 'System',
    'Lists (Views)' => 'Lists',
    'AddToAny' => 'Social',
  ];

  foreach ($block_info as $key => $info) {
    $category = $info['category'];
    if ($category instanceof \Drupal\Core\StringTranslation\TranslatableMarkup) {
      $category = $category->getUntranslatedString();
    }

    if ($category == '@entity') {
      $block_info[$key]['category'] = 'Current ' . $info['category']->render();
    }
    else {
      if (isset($category_map[$category])) {
        $block_info[$key]['category'] = t($category_map[$category]);
      }
    }
  }
}
